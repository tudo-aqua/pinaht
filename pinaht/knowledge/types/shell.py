###############################################################################
# Generated By: generate.py
# User: -
# Date: -
###############################################################################

from pinaht.knowledge.types.knowledge import Knowledge  # noqa F401


class Shell(Knowledge):
    """
    Describes an Object of the Type Shell.
    """

    def __init__(self, *args, **kwargs):
        """
        Constructor of the class Shell.
        """

        super().__init__()
        self.init_shell(*args)

        self.type = "ABSTRACT"
        self.lookup = {}

        for key, item in kwargs.items():
            if isinstance(item, list):
                for element in item:
                    self.add_child(key, element)
            else:
                self.add_child(key, item)

    def fuzzy_eq(self, other) -> float:
        # TODO
        if id(self) == id(other):
            return 1.0
        if not type(self) == type(other):
            return 0.0
        return 0.5

    def add_child(self, key, child):
        if key not in self.lookup:
            raise ValueError(
                f"Type 'Shell' has no child/attribute with name {key}. "
                "Check types.yaml or the generated PDF for correct identifiers."
            )

        else:
            raise TypeError(f"Child for attribute {key} is not of the right type")

    def init_shell(self, *args):  # noqa F811
        pass

    ### USER DEFINED METHODS ### # noqa: E266

    def execute(self, command, timeout, new_shell):
        """
        Executes a command in the shell and returns its output.

        :param command: command to execute
        :param timeout: number of seconds after which to raise a ShellTimeoutError exception
        :return: shell output
        """
        pass

    def check(self):
        """
        Checks if the shell is functional (i.e. executes commands).

        :return: true if the shell is functional, otherwise false
        """
        try:
            self.execute("true", timeout=10)
        except (ShellTimeoutError):
            self._logger.debug("shell check failed")
            return False
        self._logger.debug("shell check succeeded")
        return True


class ShellTimeoutError(Exception):
    """
    Exception indicating that a timeout in a shell has expired
    """

    pass
