###############################################################################
# Generated By: generate.py
# User: -
# Date: -
###############################################################################

from pinaht.knowledge.types.knowledge import Knowledge  # noqa F401


from pinaht.knowledge.types.service import Service

from pinaht.knowledge.types.os import OS

from pinaht.knowledge.types.ipaddress import IPAddress

from pinaht.knowledge.types.shell import Shell

from pinaht.knowledge.types.status import Status

from pinaht.knowledge.types.name import Name

from pinaht.knowledge.types.loginuser import LoginUser

from pinaht.knowledge.types.credentials import Credentials

from pinaht.knowledge.types.fstree import FsTree


class Target(Knowledge):
    """
    Describes an Object of the Type Target. A target is one specific computer Pinaht tries to hack.
    """

    def __init__(self, *args, **kwargs):
        """
        Constructor of the class Target.
        """

        super().__init__()
        self.init_target(*args)

        self.services = []

        self.os = []

        self.address = []

        self.shells = []

        self.status = []

        self.hostname = []

        self.login_user = []

        self.credentials = []

        self.filesystem = []

        self.type = "BRANCH"
        self.lookup = {
            "services": self.services,
            "os": self.os,
            "address": self.address,
            "shells": self.shells,
            "status": self.status,
            "hostname": self.hostname,
            "login_user": self.login_user,
            "credentials": self.credentials,
            "filesystem": self.filesystem,
        }

        for key, item in kwargs.items():
            if isinstance(item, list):
                for element in item:
                    self.add_child(key, element)
            else:
                self.add_child(key, item)

    def __str__(self):
        return self.__class__.__name__

    def fuzzy_eq(self, other) -> float:
        # TODO
        if id(self) == id(other):
            return 1.0
        if not type(self) == type(other):
            return 0.0
        return 0.5

    def add_child(self, key, child):
        if key not in self.lookup:
            raise ValueError(
                f"Type 'Target' has no child/attribute with name {key}. "
                "Check types.yaml or the generated PDF for correct identifiers."
            )

        if key == "services" and isinstance(child, Service):
            self.services.append(child)
            child.parent = self

        elif key == "os" and isinstance(child, OS):
            self.os.append(child)
            child.parent = self

        elif key == "address" and isinstance(child, IPAddress):
            self.address.append(child)
            child.parent = self

        elif key == "shells" and isinstance(child, Shell):
            self.shells.append(child)
            child.parent = self

        elif key == "status" and isinstance(child, Status):
            self.status.append(child)
            child.parent = self

        elif key == "hostname" and isinstance(child, Name):
            self.hostname.append(child)
            child.parent = self

        elif key == "login_user" and isinstance(child, LoginUser):
            self.login_user.append(child)
            child.parent = self

        elif key == "credentials" and isinstance(child, Credentials):
            self.credentials.append(child)
            child.parent = self

        elif key == "filesystem" and isinstance(child, FsTree):
            self.filesystem.append(child)
            child.parent = self

        else:
            raise TypeError(f"Child for attribute {key} is not of the right type")

    def init_target(self, *args):  # noqa F811
        pass

    ### USER DEFINED METHODS ### # noqa: E266
