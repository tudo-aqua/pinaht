###############################################################################
# Generated By: generate.py
# User: -
# Date: -
###############################################################################

from pinaht.knowledge.types.knowledge import Knowledge, KnowledgeEnumMeta  # noqa F401

from enum import Enum


class OperatingSystemType(Knowledge, Enum, metaclass=KnowledgeEnumMeta):
    """
    Describes an Object of the Type OperatingSystemType.
    """

    LINUX = 1

    WINDOWS = 2

    OS_2 = 3

    BSD = 4

    def __init__(self, *args, **kwargs):
        """
        Constructor of the class OperatingSystemType.
        """

        super().__init__()
        self.init_operatingsystemtype(*args)

        self.type = "LEAF_ENUM"
        self.lookup = {}

        for key, item in kwargs.items():
            if isinstance(item, list):
                for element in item:
                    self.add_child(key, element)
            else:
                self.add_child(key, item)

    def __str__(self):
        return self.name

    def fuzzy_eq(self, other) -> float:
        if type(self) == type(other):
            if self == other:
                return 1.0
        return 0.0

    def add_child(self, key, child):
        if key not in self.lookup:
            raise ValueError(
                f"Type 'OperatingSystemType' has no child/attribute with name {key}. "
                "Check types.yaml or the generated PDF for correct identifiers."
            )

        else:
            raise TypeError(f"Child for attribute {key} is not of the right type")

    def init_operatingsystemtype(self, *args):  # noqa F811
        pass

    ### USER DEFINED METHODS ### # noqa: E266
